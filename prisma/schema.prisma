generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(CUSTOMER)
  contactNo  String
  address    String
  profileImg String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
  reviews  Review[]

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

model Category {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[]

  @@map("categories")
}

model Service {
  id          String @id @default(uuid())
  name        String
  description String
  location    String
  price       Float
  duration    String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
  reviews  Review[]

  @@map("Services")
}

model Booking {
  id             String        @id @default(uuid())
  travelDate     DateTime
  numberOfPeople Int
  totalAmount    Float
  status         BookingStatus @default(PENDING)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments Payment[]

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Payment {
  id            String        @id @default(uuid())
  paymentMethod String
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Review {
  id      String @id @default(uuid())
  rating  Int
  comment String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model BlogPost {
  id        String  @id @default(uuid())
  title     String
  content   String
  author    String
  published Boolean

  tags String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog-post")
}
